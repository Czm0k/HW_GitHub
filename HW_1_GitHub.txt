JSON
 4. Создать внешний репозиторий c названием JSON. ===  заходим в свой аккаунт ГитХаб и создаем новый репозиторий c названием JSON
 5. Клонировать репозиторий JSON на локальный компьютер. ===  в терминале пишем git clone +ссылка на внешний репозиторий JSON
 6. Внутри локального JSON создать файл “new.json”. === заходим в папку JSON, в терминале пишем команду touch new.json или > new.json или cat > new.json
 7. Добавить файл под гит. === пишем команду git status, затем git add new.json, снова git status(для проверки)
 8. Закоммитить файл. ===  git commit -m  "commit new.json" 
 9. Отправить файл на внешний GitHub репозиторий. === git push
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON. === команда vim new.json + i(переход в режим редактирования insert), вносим данные в формате json и ESC + :wq
 11. Отправить изменения на внешний репозиторий. === git add new.json, git commit -m "changes new.json", git push
 12. Создать файл preferences.json === в терминале пишем команду touch preferences.json или > preferences.json или cat > preferences.json
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, страна которую хотели бы посетить) в формате JSON. === vim preferences.json + i(переход в режим редактирования insert), вносим данные в формате json и ESC + :wq
 14. Создать файл skills.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON === cat > skills.json, добавляем информацию о скиллах в формате json, ctrl + c
 15. Отправить сразу 2 файла на внешний репозиторий. === пишем git add .;git commit -m "add two files";git push  
 16. На веб интерфейсе создать файл bug_report.json. === на GitHub в репозитории JSON жмем Add file > Create new file > пишем название bug_report.json
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе. === в конце страницы нажимаем кнопку "commit new file" 
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON. === переходим в файл bug_report.json, жмем Edit this file, пишем баг репорт в формате json.
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе. ===  внизу страницы кнопка "Commit changes"
 20. Синхронизировать внешний и локальный репозиторий JSON === открываем терминал в репозитории на локальном компьютере, в терминале пишем команду git pull

XML
 21. Создать внешний репозиторий c названием XML. === заходим в свой аккаунт ГитХаб и создаем новый репозиторий c названием XML
 22. Клонировать репозиторий XML на локальный компьютер. === в терминале пишем git clone +ссылка на внешний репозиторий XML
 23. Внутри локального XML создать файл “new.xml”. === заходим в папку XML, в терминале пишем команду touch new.xml или > new.xml или cat > new.xml
 24. Добавить файл под гит. === пишем команду git status, затем git add new.xml, снова git status(для проверки)
 25. Закоммитить файл. === git commit -m  "add new.xml file"
 26. Отправить файл на внешний GitHub репозиторий. === git push
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML. === команда vim new.xml + i(переход в режим редактирования insert), вносим данные в формате xml и ESC + :wq
 28. Отправить изменения на внешний репозиторий. === git add new.xml, git commit -m "changes new.xml", git push
 29. Создать файл preferences.xml === в терминале пишем команду touch preferences.xml или > preferences.xml или cat > preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, страна которую хотели бы посетить) в формате XML. === vim preferences.xml + i(переход в режим редактирования insert), вносим данные в формате xml и ESC + :wq
 31. Создать файл skills.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML === cat > skills.xml, добавляем информацию о скиллах в формате xml, ctrl + c
 32. Сделать коммит в одну строку. === git commit -a -m "commit one str"
 33. Отправить сразу 2 файла на внешний репозиторий. === git push
 34. На веб интерфейсе создать файл bug_report.xml. === на GitHub в репозитории XML жмем Add file > Create new file > пишем название bug_report.xml
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе. === в конце страницы нажимаем кнопку "commit new file"
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.=== переходим в файл bug_report.xml, жмем Edit this file, пишем баг репорт в формате xml
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.=== внизу страницы кнопка "Commit changes"
 38. Синхронизировать внешний и локальный репозиторий XML === открываем терминал в репозитории на локальном компьютере, в терминале пишем команду git pull



TXT
 1. Создать внешний репозиторий c названием TXT.=== заходим в свой аккаунт ГитХаб и создаем новый репозиторий c названием TXT
 2. Клонировать репозиторий TXT на локальный компьютер.=== в терминале пишем git clone +ссылка на внешний репозиторий TXT
 3. Внутри локального TXT создать файл “new.txt”.=== заходим в локальный TXT, в терминале пишем команду touch new.txt или > new.txt или cat > new.txt
 4. Добавить файл под гит. === пишем команду git status, затем git add new.txt, снова git status(для проверки)
 5. Закоммитить файл. === git commit -m  "add new.txt file"
 6. Отправить файл на внешний GitHub репозиторий.=== git push
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT. === команда vim new.txt + i(переход в режим редактирования insert), вносим данные в формате txt и ESC + :wq
 8. Отправить изменения на внешний репозиторий. === git add new.txt, git commit -m "changes new.txt", git push
 9. Создать файл preferences.txt === в терминале пишем команду touch preferences.txt или > preferences.txt или cat > preferences.txt
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, страна которую хотели бы посетить) в формате TXT.=== vim preferences.txt + i(переход в режим редактирования insert), вносим данные в формате txt и ESC + :wq
 11. Создать файл skills.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT === cat > skills.txt, добавляем информацию о скиллах в формате txt, ctrl + c
 12. Сделать коммит в одну строку.=== git commit -a -m "commit one str"
 13. Отправить сразу 2 файла на внешний репозиторий. === git push
 14. На веб интерфейсе создать файл bug_report.txt.=== на GitHub в репозитории TXT жмем Add file > Create new file > пишем название bug_report.txt
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе. === в конце страницы нажимаем кнопку "commit new file"
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.=== переходим в файл bug_report.txt, жмем Edit this file, пишем баг репорт в формате txt
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе. === внизу страницы кнопка "Commit changes"
 18. Синхронизировать внешний и локальный репозиторий TXT === git pull